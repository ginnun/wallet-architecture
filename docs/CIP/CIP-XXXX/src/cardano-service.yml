asyncapi: 3.0.0
info:
  title: Wallet API
  version: 1.0.0
  description: >-
    The primary goal of a well-designed API for a multi-chain digital wallet is
    to provide the data required to construct transactions and to allow deriving
    the current state of the wallet while the set of subscribed blockchains is
    continuously extended. This includes aggregating transactions and on-chain
    events to present users their transaction history, current balance, as well
    as chain-specific features such as stake delegation or staking rewards.


    The proposed API design offers different endpoints to retrieve the same data
    in order to support a wide range of edge clients, in particular clients with
    an intermittent connection or that are bandwidth-constrained.
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
defaultContentType: application/json
servers:
  cardano-mainnet:
    host: mainnet.lacev2.com
    protocol: wss
    description: Cardano Mainnet API
    tags:
      - name: 'env:cardano-mainnet'
        description: This environment is for Cardano mainnet production
      - name: 'visibility:public'
        description: This resource is public to all users
  cardano-preprod:
    host: preprod.lacev2.com
    protocol: wss
    description: Cardano Preprod API
    tags:
      - name: 'env:cardano-mainnet'
        description: This environment is for Cardano preprod
      - name: 'visibility:public'
        description: This resource is public to all users
channels:
  cardano:
    address: /v1/wallet
    messages:
      welcome:
        $ref: '#/components/messages/welcome'
      genesis:
        $ref: '#/components/messages/genesis'
      transaction:
        $ref: '#/components/messages/transaction'
      protocolParameters:
        $ref: '#/components/messages/protocolParameters'
      eraSummary:
        $ref: '#/components/messages/eraSummary'
      subscribe:
        $ref: '#/components/messages/subscribe'
operations:
  doSubscribe:
    summary: A client subscription
    description: >-
      Sent by client to server right after establishing a connection. New
      clients must authenticate themselves when subscribing to any blockchain
      events via a signature.
    action: send
    messages:
      - $ref: '#/channels/cardano/messages/subscribe'
    channel:
      $ref: '#/channels/cardano'
  onConnect:
    summary: On client connection
    description: Event received when a client connects to the server
    action: receive
    messages:
      - $ref: '#/channels/cardano/messages/welcome'
    channel:
      $ref: '#/channels/cardano'
  onGenesis:
    summary: On client connection
    description: Event received if the client is syncing from the origin
    action: receive
    messages:
      - $ref: '#/channels/cardano/messages/genesis'
    channel:
      $ref: '#/channels/cardano'
  onTransaction:
    summary: On a relevant transaction event
    description: Event received if there is a relevant transaction for the client
    action: receive
    messages:
      - $ref: '#/channels/cardano/messages/transaction'
    channel:
      $ref: '#/channels/cardano'
  onEpochBoundary:
    summary: On epoch boundry
    description: Event receieved on every epoch boundary transition
    action: receive
    messages:
      - $ref: '#/channels/cardano/messages/protocolParameters'
    channel:
      $ref: '#/channels/cardano'
  onEraTransition:
    summary: On era transtitions
    description: Event receieved on era transitions for updated slot length
    action: receive
    messages:
      - $ref: '#/channels/cardano/messages/eraSummary'
    channel:
      $ref: '#/channels/cardano'
components:
  messages:
    welcome:
      name: Welcome
      title: Welcome message
      summary: >-
        This message is sent to all clients as the first message immediately
        upon establishing a connection. It contains      essential details about
        the server and API, helping clients understand the environment they are
        interacting with.
      contentType: application/json
    genesis:
      name: Genesis
      title: Genesis message
      summary: >-
        This top level message key is added by the server as part of any
        synchronization process that starts from the genesis point, also
        sometimes referred to origin.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/genesisPayload'
    transaction:
      name: Transaction
      title: Transaction message
      summary: >-
        The server broadcasts new, relevant transaction data to connected
        clients using chain-specific encoding protocols. This approach closely
        mimics the native blockchain synchronization process, ensuring
        compatibility and efficiency. By adhering to each blockchain's native
        encoding, the system maintains consistency with existing communication
        protocols.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/transactionPayload'
    protocolParameters:
      name: protocolParameters
      title: Protocol Parameters Server Message Partial
      summary: >-
        This top level message key is added by the server as part of any
        synchronization process for every epoch boundary transition.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/protocolParameterPayload'
    tip:
      name: Tip
      title: Server Tip Message Partial
      summary: >-
        This message partial is added to all server-sent messages and represents
        the latest current tip of the chain.
      payload:
        $ref: '#/components/schemas/protocolParameterPayload'
    eraSummary:
      name: Era Summary
      title: Era Summary Server Message Partial
      summary: >-
        Part of any synchronization process for every era transition. It has
        similarities with hardfork events on other blockchains but has been
        represented by its own message partial. The primary reason a wallet
        needs to be aware of era transitions in Cardano is due to potential
        network changes. Specifically, since the beginning of Cardano's Shelley
        era, the Ouroboros consensus protocol was introduced, which defined a
        slot lengthâ€”a specific duration of time during which a block can be
        produced by a leader (stake pool). Initially, this slot length was set
        to one second but may change in the future. Therefore, depending on the
        slot length, the conversion of a specific point in on-chain time may
        vary. In order to show and submit transaction times correctly, wallets
        need to know each era's slot length.
    subscribe:
      name: Subscribe
      title: Subscribe message
      summary: >-
        A message containing client's interests and preferences. New clients
        must authenticate themselves when subscribing to any blockchain events
        via a signature.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/subscribePayload'
  schemas:
    welcomePayload:
      type: object
      properties:
        blockchains:
          type: array
          items:
            type: object
            dditionalProperties: false
            properties:
              name:
                type: string
    genesisPayload:
      type: object
      properties:
        activeSlotsCoefficient:
          type: number
          format: float
        updateQuorum:
          type: integer
        maxLovelaceSupply:
          type: string
        networkMagic:
          type: integer
        epochLength:
          type: integer
        systemStart:
          type: integer
        slotsPerKesPeriod:
          type: integer
        slotLength:
          type: integer
        maxKesEvolutions:
          type: integer
        securityParam:
          type: integer
    transactionPayload:
      type: object
      properties:
        outputIndex:
          type: number
        txHash:
          type: string
        transactions:
          type: array
          format: string
        resolvedInputs:
          type: array
          format: string
        point:
          type: string
        chain:
          type: string
        tip:
          type: string
    pointPayload:
      type: object
      properties:
        slot:
          type: integer
        hash:
          type: string
    tipPayload:
      type: object
      properties:
        point:
          $ref: '#/components/schemas/pointPayload'
    protocolParameterPayload:
      type: object
      properties:
        epoch:
          type: integer
        minFeeA:
          type: integer
        minFeeB:
          type: integer
        maxBlockSize:
          type: integer
        maxTxSize:
          type: integer
        maxBlockHeaderSize:
          type: integer
        keyDeposit:
          type: string
        poolDeposit:
          type: string
        eMax:
          type: integer
        nOpt:
          type: integer
        a0:
          type: number
        rho:
          type: number
        tau:
          type: number
        decentralisationParam:
          type: number
        extraEntropy:
          type:
            - 'null'
            - string
        protocolMajorVer:
          type: integer
        protocolMinorVer:
          type: integer
        minUtxo:
          type: string
        minPoolCost:
          type: string
        nonce:
          type: string
        costModels:
          type: object
          properties:
            plutusV1:
              type: object
            plutusV2:
              type: object
        priceMem:
          type: number
        priceStep:
          type: number
        maxTxExMem:
          type: string
        maxTxExSteps:
          type: string
        maxBlockExMem:
          type: string
        maxBlockExSteps:
          type: string
        maxValSize:
          type: string
        collateralPercent:
          type: integer
        maxCollateralInputs:
          type: integer
        coinsPerUtxoSize:
          type: string
    eraSummaryPayload:
      type: object
      properties:
        parameters:
          type: object
          properties:
            epochLength:
              type: integer
        slotLength:
          type: integer
          description: Milliseconds
        start:
          type: object
          properties:
            slot:
              type: integer
        time:
          type: string
          format: date-time
    subscribePayload:
      type: object
      properties:
        type:
          type: string
          enum:
            - subscribe
        topic:
          type: array
          items:
            type: object
            properties:
              blockchain:
                type: object
                properties:
                  name:
                    type: string
                  network:
                    type: string
              publicKey:
                type: string
                pattern: '^[A-Za-z0-9+/=]*$'
              signature:
                type: string
                pattern: '^[A-Za-z0-9+/=]*$'
              cardano:
                type: object
                properties:
                  credentials:
                    type: object
                    properties:
                      payment:
                        type: array
                        items:
                          type: string
                          pattern: '^[A-Za-z0-9+/=]*$'
                      stake:
                        type: array
                        items:
                          type: string
                          pattern: '^[A-Za-z0-9+/=]*$'
                  points:
                    type: array
                    properties:
                      slot:
                        type: integer
                        minimum: 0
                      hash:
                        type: string
                        pattern: '^[A-Za-z0-9+/=]*$'
                    required:
                      - slot
                      - hash
                  extensions:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        config:
                          type: object
                        version:
                          type: string
                required:
                  - name
                  - config
                  - version
            required:
              - credentials
              - extensions
              - points
          required:
            - blockchain
            - signature
        timestamp:
          type: string
          format: date-time
      required:
        - type
        - topic
        - timestamp
    sentAt:
      type: string
      format: date-time
      description: Date and time when the message was sent.
