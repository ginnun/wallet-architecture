shape: sequence_diagram

Wallet: {
  shape: person
}
Server
DB: {
  shape: cylinder
}
Projector
Node: "Cardano Node"
Queue: "Task Queue" {
  shape: queue
}
Worker: "Projection Worker"

Wallet -> Server: "connect(credentials, points: PointOrOrigin[])"
Server -> DB: "findIntersection(points)"
DB -> Server: "response: intersection point or genesis"

Server -> Wallet: "<event> {network genesis parameters}"

group: "Catch-up Phase: Get intersection events" {
  group: "protocol parameters" {
    Server -> DB: "protocolParametersSince(point)"
    DB -> Server: "response: protocolParameters: [protocol-parameters]"
  }

  group: "era summaries" {
    Server -> DB: "eraSummariesSince(point)"
    DB -> Server: "response: eraSummaries: [era-summaries]"
  }

  group: "epoch summaries" {
    group: "stake summaries" {
      Server -> DB: "stakeSummariesSince(point)"
      DB -> Server: "response: stakeSummaries: [stake-summary]"
    }
    group: "supply summaries" {
      Server -> DB: "supplySummariesSince(point)"
      DB -> Server: "response: supplySummaries: [supply-summary]"
    }
    group: "rewards" {
      Server -> DB: "rewardsSince(point, credentials)"
      DB -> Server: "response: rewardsSincePoint: [rewards]"
    }
  }

  group: "transactions" {
    Server -> DB: "transactionsSince(point, credentials)"
    DB -> Server: "response: transactionsSincePoint: [transaction + block header]"

    Server -> DB: "assetInfo(assetId[])"
    DB -> Server: "response: assetInfo: [asset meta data]"
    Server -> Server: "Enrich transaction messages\nwith native asset meta data."
  }

  Server -> Server: "Merge, sort responses by point."
  Server -> Wallet: "<event> {[transactions + block header], [rewards], [epoch summary], [era summary], [protocol parameters]}"
}

group: "Synchronization Phase: Receive real time events" {
  Node -> Projector: "<event> Chain Sync"
  Projector -> DB: "write & notify(extendedBlock)"
  DB -> Server: "<event> notify(extendedBlock)"
  Server -> Wallet: "<event> {transactions}"
}

group: "Asynchronous projection" {
  Node -> Projector: "<event> Chain Sync"
  Projector -> Queue: "insert or delete task"
  Worker -> Queue: "getTask()"
  Queue -> Worker: "return task"
  Worker -> DB: "insert & notify"
  DB -> Server: "<event> {metadata: {pool:{id, metadata}}"
  Server -> Wallet: "<event> {metadata: {pool:{id, metadata}}"
}